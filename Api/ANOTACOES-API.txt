Recriar o banco de dados

-o migrations tem que ser criado antes de executar o projeto, é nessa hora que o banco é criado usando as informações do migrations.

-apagar o banco 
dotnet ef database drop

-depois que o migration estiver criado é só executar o projeto
dtonet watch run

1- esta classe é usada para registrar a data e hora que o usuário realizou alguma ação na aplicação,
o 'ActionExecutingContext' é o contexto de execução do método que no caso é 'HttpContext'
o 'ActionExecutingContext' permite realizar ações antes ou depois que o endpoint da API tenha
realizado sua função. Precisa ser incluído no 'ApplicationServiceExtensions.cs'.

2- é dessa forma que se define um 'ServiceFilter'.

3- o token foi alterado para conter o ID e o nome de usuário.

4- Configuração do EntityFramework para realizar uma relação de muitos-para-muitos
e 'delete on cascade'.

5- os dbContext e repositórios são incluídos aqui.

6- os parâmetros passados no '.FindAsync' são uma chave primária composta
    _context.Likes.FindAsync(sourceUserId, targetUserId);

7- quando o '.AsQueryable()' é usado, nenhuma ação é realizada, isso apenas cria uma
declaração da consulta que irá ser realizada.

8- o '.Select()' serve para projetar o resultado da busca em um objeto, ou seja,
ele está preenchendo um objeto.

9- criação das tabelas no banco.

10- a classe informada dentro do tipo do 'DbSet' é a classe que será usada para criar a tabela no banco,
o nome da propriedade é o nome da tabela que será criada, neste caso temos a classe 'AppUser' que será usada
para criar a tabela 'Users'
    public DbSet<AppUser> Users { get; set; }

11- configuração da relação de muito-para-muitos das tabelas de like e de mensagens.

12- o 'Messages' é o nome da tabela dentro do DbContext.
    _context.Messages.Add(message);
	
13- quando herdamos da classe 'IdentityUser' por padrão ela já contém os campos de Id, UserName, PasswordHash. Porém estes campos são do tipo 'string' e para usá-los como 'int' é só informar dentro do <>
	IdentityUser<int>
	
14- o 'IdentityDbContext' ja possui por padrão a propriedade 'User'.

15- as classes são informadas como tipos do IdentityDbContext para que possam ser usadas com os Id's do tipo 'int'.

16- configurando os 'roles'(permissões) dos usuários e suas senhas.

17- é uma forma de restringir o acesso à rota conforme o nível de acesso do usuário logado.

18- as permissões foram configuradas em 'IdentityServiceExtensions'.

19- o signalR é um serviço, não esquecer de adicioná-lo no 'ApplicationServiceExtensions.cs', também é necessário configurar um 'endpoint' em 'startup.cs'

20- essa parte é para que o signalR possar ser autenticado.

21- o '.AllowCredencials()' é para que o signalR possa ser autenticado no servidor.

22- está sendo criado um dicionário para armazenar o nome de usuário e suas 'connection strings', para cada dispositivo diferente que o usuário se logar ele receberá uma 'connection string' diferente.
>Dictionary<string, List<string>>

23- o 'lock' inpede que o dicionário 'OnlineUsers' seja acessado até terminar as instruções dentro do bloco
>lock(OnlineUsers)

24- aqui foi usado o 'AddSingleton' para que o serviço permaneça ativo enquanto a aplicação estiver sendo executada.
>services.AddSingleton<PresenceTracker>

25- se o salvamento for realizado com sucesso o '.SaveChangesAsync()' retorna 1, senão retorna 0, a verificação de '> 0' é para converter a resposta em boolenano.

26- o '.ChangeTracker.HasChanges()' é para verificar se o entity framework está monitorando alguma mudança no contexto.

27- o 'UnitOfWork' substitui a injeção dos repositórios User, Likes, Messages.

28- 





