- o contrutor de um componente é executado antes do NgOnInit.

- o spinner do loading está no app.componente.html

- quando estiver trabalhando com 'form' é obrigatório os inputs terem um 'name'

- o .subscribe pode estar vazio, mas sem ele não acontece nada.
    // this.accountService.register(this.model)
    // .subscribe({});

- o pacote usado para calcular o tempo da última vez que o usuário logou, é o 
    'ngx-timeago'.

1- o 'router-outlet' será substituído pelo conteúdo de alguma rota.

2- o '@Output' é para enviar valores para componetes pais.

3- o '@Input' é usado para receber valores de componentes filhos.

4- nesta linha podemos visualizar os parâmetros que estão sendo passados na URL
atravéz do objeto 'userParams'.

5- usando o construtor 'Map()' temos acesso a métodos como 'get' e 'set'.

6- verifica se a mesma requisição já foi feita antes, o valor armazenado em 'response' é uma requisição 
com os parâmetros 'userParams'.

7- neste ponto a requisição está sendo armazenada no 'cache' para ser usada novamente depois caso
seja feito uma requisição com os mesmos parâmetros, o 'membersCache' irá armazenar todas as 
requisições feitas.

8- o 'memberCache' é um objeto, sendo cada propriedade o retorno da api contendo dos usuários,
usando o '...' este objeto é transformado em um array. Dentro do 'reduce' todos os elementos do 'memberCache'
estão sendo transformados em um único 'array'. E por fim o 'find' retorna apenas o elemento com as informações
do usuário que foi clicado.

const member= [...this.memberCache.values()]
      .reduce((arr, elem) => arr.concat(elem.result), [])
      .find((member:Member) => member.userName === username);

9- para receber um valor de um componente pai, tenho que usar o decorator '@Input()'
@Input() member:Member;

10- para que o 'ViewChild' funcione é necessário uma variável template para referenciar o 
elemento que irá receber as informações.

11- o '@ViewChild' é para que o componente pai, possa se comunicar com o componente filho,
é necessário que o componente filho tenha uma variável template para referenciá-lo.

12- adicionando um parâmetro na query
    [queryParams]="{tab:'Messages'}"
Ex: https://localhost:4200/members/ruthie?tab=Messages

13- o resolver permite ter acesso as informações que serão carregadas pelo componente antes do
componente ser carregado.

14- o 'Resolve' é do tipo 'Member' porque a informação que quero acessar são as propriedades do 'Member'

15- o resolver precisa ser informado no 'app-routing.module'.

16- acessar a informação do 'resolver' atravéz da rota.

17- faz com que o botão do link fique ativado apenas se for realmente clicado
    [routerLinkActiveOptions]="{exact:true}"

18- o '$event.stopPropagation()' é para que o o botão não herde o evento de clique que leva acontece
perfil do usuário que enviou a mensagem.